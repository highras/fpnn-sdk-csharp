<#
//
// MessagePack for CLI
//
// Copyright (C) 2010-2012 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#>
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly Name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#
var __typeName = "MessagePackObject";
var __types = 
	new Dictionary<object, byte>
	{
		{ typeof( bool ), 1 },
		{ typeof( byte ), 2 },
		{ typeof( sbyte ), 3 },
		{ typeof( short ), 4 },
		{ typeof( ushort ), 5 },
		{ typeof( int ), 6 },
		{ typeof( uint ), 7 },
		{ typeof( long ), 8 },
		{ typeof( ulong ), 9 },
		{ typeof( float ), 0x10 | 1 },
		{ typeof( double ), 0x10 | 2 },
		{ typeof( string ), 0x10 | 3 },
		{ typeof( byte[] ), 0x10 | 4 },
		{ "MessagePackExtendedTypeObject", 0x20 | 1 },
	};
Func<object, bool> __IsNotCLSCompliant =
	input => 		
	{
		var type = ( input as Type ) ?? typeof( object );
		return 
			type == typeof( sbyte )
			|| type == typeof( ushort )
			|| type == typeof( uint )
			|| type == typeof( ulong );
	};
#>
#region -- License Terms --
//
// MessagePack for CLI
//
// Copyright (C) 2010-2012 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#endregion -- License Terms --

using System;
using System.Diagnostics.Contracts;
using System.Runtime.InteropServices;

namespace MsgPack
{
	// This file generated from <#= __typeName #>.tt T4Template.
	// Do not modify this file. Edit <#= __typeName #>.tt instead.

	/// <summary>
	///		Represents deserialized object of MsgPack.
	/// </summary>
	[StructLayout( LayoutKind.Auto )]
	public partial struct <#= __typeName #> : IEquatable<<#= __typeName #>>, IPackable
	{
		#region -- Constructors --
<#
foreach(var t in __types.Keys )
{
#>

		/// <summary>
		///		Initializes a new instance of the <see cref="<#= __typeName #>"/> type which wraps <#= t == typeof( byte[] ) ? "<see cref=\"Byte\" />[]" : "<see cref=\"" + GetTypeName( t ) + "\" />" #> instance.
		/// </summary>
<#
if( __IsNotCLSCompliant( t ) )
{
#>
		[CLSCompliant( false )]
<#
}
#>
		public <#= __typeName #>( <#= GetTypeName( t ) #> value )
		{
<#
	this.GenerateConstructor( __typeName, "this", t );
#>
		}
<#
}
#>

		#endregion -- Constructors --

		#region -- Primitive Type Conversion Methods --
<#
foreach(var t in __types.Keys )
{
#>

		/// <summary>
		///		Convert this instance to <#= t == typeof( byte[] ) ? "<see cref=\"Byte\" />[]" : "<see cref=\"" + GetTypeName( t ) + "\" />" #> instance.
		/// </summary>
		/// <returns><#= t == typeof( byte[] ) ? "<see cref=\"Byte\" />[]" : "<see cref=\"" + GetTypeName( t ) + "\" />" #> instance corresponds to this instance.</returns>
<#
if( __IsNotCLSCompliant( t ) )
{
#>
		[CLSCompliant( false )]
<#
}
#>
		public <#= GetTypeName( t ) #> As<#= t == typeof( byte[] ) ? "Binary" : GetTypeName( t ) #>()
		{
<#
	this.GenerateAsT( "this", t, false );
#>
		}
<#
}
#>

		#endregion -- Primitive Type Conversion Methods --

		#region -- Conversion Operator Overloads --

<#
foreach(var t in __types.Keys )
{
#>

		/// <summary>
		///		Convert <#= t == typeof( byte[] ) ? "<see cref=\"Byte\" />[]" : "<see cref=\"" + GetTypeName( t ) + "\" />" #>instance to <see cref="<#= __typeName #>"/> instance.
		/// </summary>
		/// <param name="value"><#= t == typeof( byte[] ) ? "<see cref=\"Byte\" />[]" : "<see cref=\"" + GetTypeName( t ) + "\" />" #> instance.</param>
		/// <returns><see cref="<#=  __typeName #>"/> instance corresponds to <paramref name="value"/>.</returns>
<#
if( __IsNotCLSCompliant( t ) )
{
#>
		[CLSCompliant( false )]
<#
}
#>
		public static implicit operator <#= __typeName #>( <#= GetTypeName( t ) #> value )
		{
			<#= __typeName #> result;
<#
	this.GenerateConstructor( __typeName, "result", t );
#>
			return result;
		}
<#
}
#>

<#
foreach(var t in __types.Keys )
{
#>

		/// <summary>
		///		Convert this instance to <#= t == typeof( byte[] ) ? "<see cref=\"Byte\" />[]" : "<see cref=\"" + GetTypeName( t ) + "\" />" #> instance.
		/// </summary>
		/// <param name="value"><see cref="<#= __typeName #>"/> instance.</param>
		/// <returns><#= t == typeof( byte[] ) ? "<see cref=\"Byte\" />[]" : "<see cref=\"" + GetTypeName( t ) + "\" />" #> instance corresponds to <paramref name="value"/>.</returns>
<#
	if( __IsNotCLSCompliant( t ) )
	{
#>
		[CLSCompliant( false )]
<#
	}
#>
		public static explicit operator <#= GetTypeName( t ) #>( <#= __typeName #> value )
		{
<#
	this.GenerateAsT( "value", t, true );
#>
		}
<#
}
#>

		#endregion -- Conversion Operator Overloads --
	}
}
<#+
private static bool IsExplicitConversionRequired( Type type )
{
	return 
		type == typeof( sbyte )
		|| type == typeof( short )
		|| type == typeof( int )
		|| type == typeof( long );
}

private void GenerateConstructor( string typeName, string val, object typeOrTypeName )
{
	var t = typeOrTypeName as Type;
#>
			// trick: Avoid long boilerplate initialization. See "CLR via C#".
			<#= val #> = new <#= typeName #>();
<#+ 
	if( t == null )
	{
#>
			<#= val #>._value = value.TypeCode;
			<#= val #>._handleOrTypeCode = value.Body;
<#+
		return;
	}
	else if( t == typeof( byte[] ) )
	{
#>
			if ( value == null )
			{
				<#= val #>._handleOrTypeCode = null;
			}
			else
			{
				<#= val #>._handleOrTypeCode = new MessagePackString( value );
			}
<#+
		return;
	}
	else if( t == typeof( string ) )
	{
#>
			if ( value == null )
			{
				<#= val #>._handleOrTypeCode = null;
			}
			else
			{
				<#= val #>._handleOrTypeCode = new MessagePackString( value );
			}
<#+
		return;
	}
	
	if( t == typeof( bool ) )
	{
#>
			<#= val #>._value = value ? ( ulong )1 : 0;
<#+ 
	}
	else if( IsExplicitConversionRequired( t ) )
	{
#>
			<#= val #>._value = unchecked( ( ulong )value );
<#+ 
	}
	else if ( t == typeof( float ) )
	{
#>
			var bytes = BitConverter.GetBytes( value );
			unchecked
			{
#pragma warning disable 0675
				if( BitConverter.IsLittleEndian )
				{
					<#= val #>._value |=  ( ulong )( bytes[ 3 ] << 24 );
					<#= val #>._value |=  ( ulong )( bytes[ 2 ] << 16 );
					<#= val #>._value |=  ( ulong )( bytes[ 1 ] << 8 );
					<#= val #>._value |=  bytes[ 0 ];
				}
				else
				{
					<#= val #>._value |=  ( ulong )( bytes[ 0 ] << 24 );
					<#= val #>._value |=  ( ulong )( bytes[ 1 ] << 16 );
					<#= val #>._value |=  ( ulong )( bytes[ 2 ] << 8 );
					<#= val #>._value |=  bytes[ 3 ];
				}
#pragma warning restore 0675
			}
<#+ 
	}
	else if ( t == typeof( double ) )
	{
#>
			<#= val #>._value = unchecked( ( ulong )BitConverter.DoubleToInt64Bits( value ) );
<#+ 
	}
	else
	{
#>
			<#= val #>._value = value;
<#+ 
	}
#>
			<#= val #>._handleOrTypeCode = _<#= t.Name.ToLowerInvariant() #>TypeCode;
<#+
} // GenerateConstructor

private void GenerateAsT( string val, Object typeOrTypeName, bool passParameterName )
{
	var t = typeOrTypeName as Type;
	var typeName = GetTypeName( typeOrTypeName );

	if( t == null || t.IsValueType )
	{
#>
			if( <#= val #>.IsNil )
			{
				ThrowCannotBeNilAs<#= "<" + typeName  + ">" #>();
			}
<#+
	}

	if ( t == null ) // MPETO
	{
#>
			VerifyUnderlyingType<MessagePackExtendedTypeObject>( <#= val #>, <#= passParameterName ? "\"" + val + "\"" : "null" #>  );

			return MessagePackExtendedTypeObject.Unpack( unchecked( ( byte )<#= val #>._value ), <#= val #>._handleOrTypeCode as byte[] );
<#+
	}
	else if ( t == typeof( byte[] ) )
	{
#>
			VerifyUnderlyingType<MessagePackString>( <#= val #>, <#= passParameterName ? "\"" + val + "\"" : "null" #>  );

			if( <#= val #>._handleOrTypeCode == null )
			{
				// nil
				return null;
			}

			var asString = <#= val #>._handleOrTypeCode as MessagePackString;
			Contract.Assert( asString != null );
			return asString.GetBytes();
<#+
	}
	else if ( t == typeof( string ) )
	{
#>
			VerifyUnderlyingType<MessagePackString>( <#= val #>, <#= passParameterName ? "\"" + val + "\"" : "null" #> );

			if( <#= val #>._handleOrTypeCode == null )
			{
				// nil
				return null;
			}

			var asString = <#= val #>._handleOrTypeCode as MessagePackString;
			Contract.Assert( asString != null );
			return asString.GetString();
<#+
	}
	else if ( t == typeof( bool ) )
	{
#>
			var typeCode = <#= val #>._handleOrTypeCode as ValueTypeCode;
			if( typeCode == null || typeCode.TypeCode != MessagePackValueTypeCode.Boolean )
			{
				ThrowInvalidTypeAs<bool>( <#= val #> );
			}
			
			return <#= val #>._value != 0;
<#+
	}
	else if ( t == typeof( float ) )
	{
#>
			var typeCode = <#= val #>._handleOrTypeCode as ValueTypeCode;
			if( typeCode == null )
			{
				ThrowInvalidTypeAs<float>( <#= val #> );
			}
			
			if( typeCode.IsInteger )
			{
				if( typeCode.IsSigned )
				{
					return ( float )( unchecked( ( long )<#= val #>._value ) );
				}
				else
				{
					return ( float )<#= val #>._value;
				}
			}
			else if( typeCode.TypeCode == MessagePackValueTypeCode.Double )
			{
				return ( <#= t.Name #> )BitConverter.Int64BitsToDouble( unchecked( ( long )<#= val #>._value ) );
			}
			else if( typeCode.TypeCode == MessagePackValueTypeCode.Single )
			{
				return ( <#= t.Name #> )BitConverter.ToSingle( BitConverter.GetBytes( <#= val #>._value ), 0 );
			}
			else
			{
				ThrowInvalidTypeAs<float>( <#= val #> );
				return default( float ); // never reached
			}
<#+
	}
	else if ( t == typeof( double ) )
	{
#>
			var typeCode = <#= val #>._handleOrTypeCode as ValueTypeCode;
			if( typeCode == null )
			{
				ThrowInvalidTypeAs<double>( <#= val #> );
			}
			
			if( typeCode.IsInteger )
			{
				if( typeCode.IsSigned )
				{
					return ( double )( unchecked( ( long )<#= val #>._value ) );
				}
				else
				{
					return ( double )<#= val #>._value;
				}
			}
			else if( typeCode.TypeCode == MessagePackValueTypeCode.Double )
			{
				return ( <#= t.Name #> )BitConverter.Int64BitsToDouble( unchecked( ( long )<#= val #>._value ) );
			}
			else if( typeCode.TypeCode == MessagePackValueTypeCode.Single )
			{
				return ( <#= t.Name #> )BitConverter.ToSingle( BitConverter.GetBytes( <#= val #>._value ), 0 );
			}
			else
			{
				ThrowInvalidTypeAs<double>( <#= val #> );
				return default( double ); // never reached
			}
<#+
	}
	else if ( t.Name[ 0 ] == 'U' )
	{
#>
			var typeCode = <#= val #>._handleOrTypeCode as ValueTypeCode;
			if( typeCode == null )
			{
				ThrowInvalidTypeAs<#= "<" + t.Name + ">" #>( <#= val #> );
			}
			
			if( typeCode.IsInteger )
			{
<#+
		if ( t == typeof( UInt64 ) )
		{
#>
				if( typeCode.IsSigned )
				{
					if( Int64.MaxValue < <#= val #>._value )
					{
						// Negative.
						ThrowInvalidTypeAs<#= "<" + t.Name + ">" #>( <#= val #> );
					}
				}

				return <#= val #>._value;
<#+
		}
		else
		{
#>
				const ulong maxValue = unchecked( ( ulong )<#= t.Name #>.MaxValue );
				
				if( maxValue < <#= val #>._value )
				{
					// Overflow or negative.
					ThrowInvalidTypeAs<#= "<" + t.Name + ">" #>( <#= val #> );
				}

				return unchecked( ( <#= t.Name #> )<#= val #>._value );
<#+
		}
#>
			}
			else if( typeCode.TypeCode == MessagePackValueTypeCode.Double )
			{
				return ( <#= t.Name #> )BitConverter.Int64BitsToDouble( unchecked( ( long )<#= val #>._value ) );
			}
			else if( typeCode.TypeCode == MessagePackValueTypeCode.Single )
			{
				return ( <#= t.Name #> )BitConverter.ToSingle( BitConverter.GetBytes( <#= val #>._value ), 0 );
			}
			else
			{
				ThrowInvalidTypeAs<#= "<" + t.Name + ">" #>( <#= val #> );
				return default( <#= t.Name #> ); // never reached
			}
<#+
	}
	else
	{
#>
			var typeCode = <#= val #>._handleOrTypeCode as ValueTypeCode;
			if( typeCode == null )
			{
				ThrowInvalidTypeAs<#= "<" + t.Name + ">" #>( <#= val #> );
			}
			
			if( typeCode.IsInteger )
			{
				if( typeCode.IsSigned )
				{
<#+
		if ( t == typeof( Int64 ) )
		{
#>
					return unchecked( ( long )<#= val #>._value );
<#+
		}
		else
		{
#>
					const long minValue = ( long )<#= t.Name #>.MinValue;
					const long maxValue = ( long )<#= t.Name #>.MaxValue;
					
					long asInt64 = unchecked( ( long )<#= val #>._value );
					if( asInt64 < minValue || maxValue < asInt64 )
					{
						ThrowInvalidTypeAs<#= "<" + t.Name + ">" #>( <#= val #> );
					}

					return unchecked( ( <#= t.Name #> )asInt64 );
<#+
		}
#>
				}
				else
				{
					const ulong maxValue = unchecked( ( ulong )<#= t.Name #>.MaxValue );
					if( maxValue < <#= val #>._value )
					{
						ThrowInvalidTypeAs<#= "<" + t.Name + ">" #>( <#= val #> );
					}
					
					return ( <#= t.Name #> )<#= val #>._value;
				}
			}
			else if( typeCode.TypeCode == MessagePackValueTypeCode.Double )
			{
				return ( <#= t.Name #> )BitConverter.Int64BitsToDouble( unchecked( ( long )<#= val #>._value ) );
			}
			else if( typeCode.TypeCode == MessagePackValueTypeCode.Single )
			{
				return ( <#= t.Name #> )BitConverter.ToSingle( BitConverter.GetBytes( <#= val #>._value ), 0 );
			}
			else
			{
				ThrowInvalidTypeAs<#= "<" + t.Name + ">" #>( <#= val #> );
				return default( <#= t.Name #> ); // never reached
			}
<#+
	}
}

private static string GetTypeName( object typeOrTypeName )
{
	return ( typeOrTypeName as string ) ?? ( typeOrTypeName as Type ).Name;
}
#>