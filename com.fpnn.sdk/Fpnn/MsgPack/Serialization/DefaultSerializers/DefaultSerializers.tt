<#
//
// MessagePack for CLI
//
// Copyright (C) 2010-2012 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#>
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly Name="System" #>
<#@ assembly Name="System.Core" #>
<#@ assembly Name="System.Numerics" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Numerics" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#
var __excludes =
	new HashSet<Type>()
	{
		// Special(manual) handlings on builtin marshaler:
		typeof( System.Runtime.InteropServices.ComTypes.FILETIME ),
		// Special(manual) handlings on builtin serializer:
		typeof( System.ArraySegment<> ),
		typeof( System.Collections.DictionaryEntry ),
		typeof( System.Collections.Generic.KeyValuePair<,> ),
		typeof( System.Numerics.Complex ),
		// Special handling on serializer:
		typeof( System.Nullable<> ),
		// Not supported:
		typeof( void ),
		typeof( System.IntPtr ),
		typeof( System.UIntPtr ),
		typeof( System.ModuleHandle ),
		typeof( System.RuntimeTypeHandle ),
		typeof( System.RuntimeFieldHandle ),
		typeof( System.RuntimeMethodHandle ),
		typeof( System.RuntimeArgumentHandle ),
		typeof( System.ArgIterator ),
		typeof( System.ConsoleKeyInfo ),
		typeof( System.TypedReference ),
		typeof( System.ComponentModel.Design.Serialization.MemberRelationship ),
		typeof( System.Diagnostics.CounterSample ),
		typeof( System.Diagnostics.Eventing.EventDescriptor ),
		typeof( System.Diagnostics.SymbolStore.SymbolToken ),
		typeof( System.IO.WaitForChangedResult ),
		typeof( System.Net.Sockets.IPPacketInformation ),
		typeof( System.Net.Sockets.SocketInformation ),
		typeof( System.Reflection.CustomAttributeNamedArgument ),
		typeof( System.Reflection.CustomAttributeTypedArgument ),
		typeof( System.Reflection.InterfaceMapping ),
		typeof( System.Reflection.ParameterModifier ),
		typeof( System.Reflection.Emit.EventToken ),
		typeof( System.Reflection.Emit.FieldToken ),
		typeof( System.Reflection.Emit.Label ),
		typeof( System.Reflection.Emit.MethodToken ),
		typeof( System.Reflection.Emit.OpCode ),
		typeof( System.Reflection.Emit.ParameterToken ),
		typeof( System.Reflection.Emit.PropertyToken ),
		typeof( System.Reflection.Emit.SignatureToken ),
		typeof( System.Reflection.Emit.StringToken ),
		typeof( System.Reflection.Emit.TypeToken ),
		typeof( System.Runtime.InteropServices.ArrayWithOffset ),
		typeof( System.Runtime.InteropServices.GCHandle ),
		typeof( System.Runtime.InteropServices.HandleRef ),
		typeof( System.Runtime.InteropServices.ComTypes.BIND_OPTS ),
		typeof( System.Runtime.InteropServices.ComTypes.BINDPTR ),
		typeof( System.Runtime.InteropServices.ComTypes.CONNECTDATA ),
		typeof( System.Runtime.InteropServices.ComTypes.DISPPARAMS ),
		typeof( System.Runtime.InteropServices.ComTypes.ELEMDESC ),
		typeof( System.Runtime.InteropServices.ComTypes.EXCEPINFO ),
		typeof( System.Runtime.InteropServices.ComTypes.FORMATETC ),
		typeof( System.Runtime.InteropServices.ComTypes.FUNCDESC ),
		typeof( System.Runtime.InteropServices.ComTypes.IDLDESC ),
		typeof( System.Runtime.InteropServices.ComTypes.PARAMDESC ),
		typeof( System.Runtime.InteropServices.ComTypes.STATDATA ),
		typeof( System.Runtime.InteropServices.ComTypes.STATSTG ),
		typeof( System.Runtime.InteropServices.ComTypes.STGMEDIUM ),
		typeof( System.Runtime.InteropServices.ComTypes.TYPEATTR ),
		typeof( System.Runtime.InteropServices.ComTypes.TYPEDESC ),
		typeof( System.Runtime.InteropServices.ComTypes.TYPELIBATTR ),
		typeof( System.Runtime.InteropServices.ComTypes.VARDESC ),
		typeof( System.Runtime.Serialization.SerializationEntry ),
		typeof( System.Runtime.Serialization.StreamingContext ),
		typeof( System.Security.Cryptography.CngProperty ),
		typeof( System.Security.Cryptography.DSAParameters ),
		typeof( System.Security.Cryptography.RSAParameters ),
		typeof( System.Security.Cryptography.CngProperty ),
		typeof( System.Security.Cryptography.X509Certificates.X509ChainStatus ),
		typeof( System.Threading.AsyncFlowControl ),
		typeof( System.Threading.CancellationToken ),
		typeof( System.Threading.CancellationTokenRegistration ),
		typeof( System.Threading.LockCookie ),
		typeof( System.Threading.NativeOverlapped ),
		typeof( System.Threading.SpinLock ),
		typeof( System.Threading.SpinWait ),
		typeof( System.Threading.Tasks.ParallelLoopResult ),
	};
var __winRTExcludes =
	new HashSet<string>()
	{
		"System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken",
		"System.Runtime.CompilerServices.AsyncVoidMethodBuilder",
		"System.Runtime.CompilerServices.AsyncTaskMethodBuilder",
		"System.Runtime.CompilerServices.AsyncVoidMethodBuilder",
		"System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1",
		"System.Runtime.CompilerServices.TaskAwaiter",
		"System.Runtime.CompilerServices.TaskAwaiter`1",
		"System.Runtime.CompilerServices.ConfiguredTaskAwaitable",
		"System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1",
		"System.Runtime.CompilerServices.YieldAwaitable",
		"System.Reflection.Emit.ExceptionHandler",
		"System.Net.Sockets.UdpReceiveResult",
	};
	
var __types = 
	typeof( object ).Assembly.GetTypes()
	.Where( type => type.IsValueType && type.IsPublic && !Attribute.IsDefined( type, typeof( ObsoleteAttribute ) ) )
	.Concat(
		typeof( TraceListener ).Assembly.GetTypes().Where( type => type.IsValueType && type.IsPublic && !Attribute.IsDefined( type, typeof( ObsoleteAttribute ) ) )
	).Concat(
		typeof( Enumerable ).Assembly.GetTypes().Where( type => type.IsValueType && type.IsPublic && !Attribute.IsDefined( type, typeof( ObsoleteAttribute ) ) )
	).Concat(
		typeof( BigInteger ).Assembly.GetTypes().Where( type => type.IsValueType && type.IsPublic && !Attribute.IsDefined( type, typeof( ObsoleteAttribute ) ) )
	).Except( __excludes )
	.Where( t => !__winRTExcludes.Contains( t.FullName ) )
	.ToArray();
	
var __workArounds =
	new Dictionary<Type, WorkAround>()
	{
		{ typeof( char ), new WorkAround(){ PackCode = "packer.Pack( ( System.UInt16 )value );", UnpackCode = "return ( System.Char ) unpacker.LastReadData.AsUInt16(); " } },
		{ typeof( decimal ), new WorkAround(){ PackCode = "packer.PackString( value.ToString( \"G\", CultureInfo.InvariantCulture ) );", UnpackCode = "return System.Decimal.Parse( unpacker.LastReadData.AsString(), CultureInfo.InvariantCulture ); " } },
		{ typeof( DateTime ), new WorkAround(){ PackCode = "packer.Pack( MessagePackConvert.FromDateTime( value ) );", UnpackCode = "return MessagePackConvert.ToDateTime( unpacker.LastReadData.AsInt64() ); " } },
		{ typeof( DateTimeOffset ), new WorkAround(){ PackCode = "packer.Pack( MessagePackConvert.FromDateTimeOffset( value ) );", UnpackCode = "return MessagePackConvert.ToDateTimeOffset( unpacker.LastReadData.AsInt64() ); " } },
		{ typeof( Guid ), new WorkAround(){ PackCode = "packer.PackRaw( value.ToByteArray() );", UnpackCode = "return new System.Guid( unpacker.LastReadData.AsBinary() ); " } },
		{ typeof( BigInteger ), new WorkAround(){ PackCode = "packer.PackRaw( value.ToByteArray() );", UnpackCode = "return new System.Numerics.BigInteger( unpacker.LastReadData.AsBinary() ); " } },
	};

var __notInSLs =
	new HashSet<Type>()
	{
		typeof( System.Collections.Specialized.BitVector32 ),
	};

var __notInWPs =
	new HashSet<Type>()
	{
		typeof( System.Numerics.BigInteger ),
		typeof( System.Numerics.Complex ),
	};

#>
#region -- License Terms --
//
// MessagePack for CLI
//
// Copyright (C) 2010-2012 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#endregion -- License Terms --

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Reflection;
using System.Runtime.Serialization;

namespace MsgPack.Serialization.DefaultSerializers
{
	// This file generated from DefaultSerializers.tt T4Template.
	// Do not modify this file. Edit DefaultMarshalers.tt instead.
<#
foreach( Type __type in __types )
{
	if( __type.IsEnum )
	{
		continue;
	}
#>

<#
	if( __type.IsGenericTypeDefinition && !__workArounds.ContainsKey( __type ) )
	{
#>
#error <#= __type #> cannot be generated
<#
		continue;
	}
	
	var ctors = __type.GetConstructors( BindingFlags.Public | BindingFlags.Instance ).Where( item => item.GetParameters().Length == 1 ).Where( item => IsMessagePackPrimitive( item.GetParameters()[ 0 ].ParameterType ) ).ToArray();
	
	if ( __notInSLs.Contains( __type ) )
	{
#>
#if !SILVERLIGHT && !NETFX_CORE
<#
	}
	
	if ( __notInWPs.Contains( __type ) )
	{
#>
#if !WINDOWS_PHONE && !NETFX_35
<#
	}

	var __typeName = __type.FullName.Replace( Type.Delimiter, '_' ).Replace( '`', '_' ) + "MessagePackSerializer";
#>
	internal sealed class <#= __typeName #> : MessagePackSerializer< <#= ToCSharpToken( __type ) #> >
	{
		public <#= __typeName #>( PackerCompatibilityOptions packerCompatibilityOptions )
			: base( packerCompatibilityOptions ) { }

		protected internal sealed override void PackToCore( Packer packer, <#= __type.FullName #> value )
		{
<#
	if ( __workArounds.ContainsKey( __type ) )
	{
#>
			<#= __workArounds[ __type ].PackCode #>
<#
	}
	else if ( __type.IsPrimitive )
	{
#>
			packer.Pack( value );
<#
	}
	else if ( ctors.Length != 1 )
	{
#>
#error <#= __type.FullName #> has <#= ctors.Length #> parameter constructors
			/*
<#
foreach( var ctor in ctors )
{
#>
			 * <#= ctor #>
<#
}
#>
			 */
<#
	}
	else if ( IsMessagePackPrimitive( ctors[ 0 ].GetParameters()[ 0 ].ParameterType ) )
	{
#>
			packer.Pack( value.<#= Pascalize( ctors[ 0 ].GetParameters()[ 0 ].Name ) #> );
<#
	}
	else
	{
#>
#error ParameterType '<#= ctors[ 0 ].GetParameters()[ 0 ].ParameterType #>' is not primitive.
<#
	}
#>
		}

		protected internal sealed override  <#= __type.FullName #> UnpackFromCore( Unpacker unpacker )
		{
<#
	if ( __workArounds.ContainsKey( __type ) )
	{
#>
			try
			{
				<#= __workArounds[ __type ].UnpackCode #>
			}
			catch( ArgumentException ex )
			{
				throw new SerializationException( String.Format( CultureInfo.CurrentCulture, "The unpacked value is not expected type. {0}", ex.Message ), ex );
			}
			catch( InvalidOperationException ex )
			{
				throw new SerializationException( String.Format( CultureInfo.CurrentCulture, "The unpacked value is not expected type. {0}", ex.Message ), ex );
			}
<#
	}
	else if ( __type.IsPrimitive )
	{
#>
			try
			{
				return unpacker.LastReadData.As<#= __type.Name #>();
			}
			catch( InvalidOperationException ex )
			{
				throw new SerializationException( String.Format( CultureInfo.CurrentCulture, "The unpacked value is not '{0}' type. {1}", typeof( <#= __type #> ), ex.Message ) );
			}
<#
	}
	else if ( ctors.Length != 1 )
	{
#>
#error <#= __type.FullName #> has <#= ctors.Length #> parameter constructors
			/*
<#
foreach( var ctor in ctors )
{
#>
			 * <#= ctor #>
<#
}
#>
			 */
<#
	}
	else if ( IsMessagePackPrimitive( ctors[ 0 ].GetParameters()[ 0 ].ParameterType ) )
	{
		var __ctorParameterType = ctors[ 0 ].GetParameters()[ 0 ].ParameterType;
#>
			<#= __ctorParameterType #> ctorArgument;
			try
			{
				ctorArgument = unpacker.LastReadData.As<#= __ctorParameterType.Name #>();
			}
			catch( InvalidOperationException ex )
			{
				throw new SerializationException( String.Format( CultureInfo.CurrentCulture, "The unpacked value is not '{0}' type. {1}", typeof( <#= __ctorParameterType #> ), ex.Message ) );
			}

			return new <#= __type.FullName #>( ctorArgument );
<#
	}
	else
	{
#>
#error ParameterType '<#= ctors[ 0 ].GetParameters()[ 0 ].ParameterType #>' is not primitive.
<#
	}
#>
		}
	}
<#
	if ( __notInWPs.Contains( __type ) )
	{
#>
#endif // !WINDOWS_PHONE && !NETFX_35
<#
	}

	if ( __notInSLs.Contains( __type ) )
	{
#>
#endif // !SILVERLIGHT && !NETFX_CORE
<#
	}
}
#>
}
<#+
private static string Pascalize( string value )
{
	if( String.IsNullOrEmpty( value ) )
	{
		return value;
	}
	
	return Char.ToUpperInvariant( value[ 0 ] ) + value.Substring( 1 );
}

private static void BuildCSharpGenericArgumentsToken( Type type, StringBuilder buffer )
{
	if( !type.IsGenericType)
	{
		return;
	}
	
	buffer.Append('<');
	
	bool isFirst = true;
	foreach( Type genericParameter in type.GetGenericArguments () )
	{	
		if( isFirst )
		{
			isFirst = false;
		}
		else
		{
			buffer.Append( ',' ).Append( ' ' );
		}
		
		if( genericParameter.IsGenericParameter )
		{
			buffer.Append( genericParameter.Name );
		}
		else
		{
			buffer.Append( genericParameter.FullName );
		}	
	}
	
	buffer.Append( '>' );}

private static string ToCSharpToken( Type type )
{
	if( !type.IsGenericType )
	{
		return type.FullName;
	}
	
	StringBuilder buffer = new StringBuilder( type.FullName.Remove( type.FullName.IndexOf( '`' ) ) );

	BuildCSharpGenericArgumentsToken( type, buffer );
	
	return buffer.ToString();
}

private static bool IsMessagePackPrimitive( Type type )
{
	switch( Type.GetTypeCode( type ) )
	{
		case TypeCode.Char:
		case TypeCode.DateTime:
		case TypeCode.DBNull:
		case TypeCode.Decimal:
		case TypeCode.Empty:
		case TypeCode.Object:
		{
			return false;
		}
		default:
		{
			return true;
		}
	}
}

private struct WorkAround
{
	public string PackCode;
	public string UnpackCode;
}
#>