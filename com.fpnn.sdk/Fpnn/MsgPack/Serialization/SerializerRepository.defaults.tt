<#
//
// MessagePack for CLI
//
// Copyright (C) 2010-2012 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#>
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly Name="System" #>
<#@ assembly Name="System.Core" #>
<#@ assembly Name="System.Numerics" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Collections.Specialized" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Numerics" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#
var __typeName = "SerializerRepository";
// Copied from DefaultSerializers.tt
var __excludes =
	new HashSet<Type>()
	{
		// Special(manual) handlings on builtin marshaler:
		// typeof( System.Guid ),
		// typeof( System.Runtime.InteropServices.ComTypes.FILETIME ),
		// Special(manual) handlings on builtin serializer:
		typeof( System.ArraySegment<> ),
		typeof( System.Collections.DictionaryEntry ),
		typeof( System.Collections.Generic.KeyValuePair<,> ),
		typeof( System.Numerics.Complex ),
		// Special handling on serializer:
		typeof( System.Nullable<> ),
		// Not supported:
		typeof( void ),
		typeof( System.IntPtr ),
		typeof( System.UIntPtr ),
		typeof( System.ModuleHandle ),
		typeof( System.RuntimeTypeHandle ),
		typeof( System.RuntimeFieldHandle ),
		typeof( System.RuntimeMethodHandle ),
		typeof( System.RuntimeArgumentHandle ),
		typeof( System.ArgIterator ),
		typeof( System.ConsoleKeyInfo ),
		typeof( System.TypedReference ),
		typeof( System.ComponentModel.Design.Serialization.MemberRelationship ),
		typeof( System.Diagnostics.CounterSample ),
		typeof( System.Diagnostics.Eventing.EventDescriptor ),
		typeof( System.Diagnostics.SymbolStore.SymbolToken ),
		typeof( System.IO.WaitForChangedResult ),
		typeof( System.Net.Sockets.IPPacketInformation ),
		typeof( System.Net.Sockets.SocketInformation ),
		typeof( System.Reflection.CustomAttributeNamedArgument ),
		typeof( System.Reflection.CustomAttributeTypedArgument ),
		typeof( System.Reflection.InterfaceMapping ),
		typeof( System.Reflection.ParameterModifier ),
		typeof( System.Reflection.Emit.EventToken ),
		typeof( System.Reflection.Emit.FieldToken ),
		typeof( System.Reflection.Emit.Label ),
		typeof( System.Reflection.Emit.MethodToken ),
		typeof( System.Reflection.Emit.OpCode ),
		typeof( System.Reflection.Emit.ParameterToken ),
		typeof( System.Reflection.Emit.PropertyToken ),
		typeof( System.Reflection.Emit.SignatureToken ),
		typeof( System.Reflection.Emit.StringToken ),
		typeof( System.Reflection.Emit.TypeToken ),
		typeof( System.Runtime.InteropServices.ArrayWithOffset ),
		typeof( System.Runtime.InteropServices.GCHandle ),
		typeof( System.Runtime.InteropServices.HandleRef ),
		typeof( System.Runtime.InteropServices.ComTypes.BIND_OPTS ),
		typeof( System.Runtime.InteropServices.ComTypes.BINDPTR ),
		typeof( System.Runtime.InteropServices.ComTypes.CONNECTDATA ),
		typeof( System.Runtime.InteropServices.ComTypes.DISPPARAMS ),
		typeof( System.Runtime.InteropServices.ComTypes.ELEMDESC ),
		typeof( System.Runtime.InteropServices.ComTypes.EXCEPINFO ),
		typeof( System.Runtime.InteropServices.ComTypes.FORMATETC ),
		typeof( System.Runtime.InteropServices.ComTypes.FUNCDESC ),
		typeof( System.Runtime.InteropServices.ComTypes.IDLDESC ),
		typeof( System.Runtime.InteropServices.ComTypes.PARAMDESC ),
		typeof( System.Runtime.InteropServices.ComTypes.STATDATA ),
		typeof( System.Runtime.InteropServices.ComTypes.STATSTG ),
		typeof( System.Runtime.InteropServices.ComTypes.STGMEDIUM ),
		typeof( System.Runtime.InteropServices.ComTypes.TYPEATTR ),
		typeof( System.Runtime.InteropServices.ComTypes.TYPEDESC ),
		typeof( System.Runtime.InteropServices.ComTypes.TYPELIBATTR ),
		typeof( System.Runtime.InteropServices.ComTypes.VARDESC ),
		typeof( System.Runtime.Serialization.SerializationEntry ),
		typeof( System.Runtime.Serialization.StreamingContext ),
		typeof( System.Security.Cryptography.CngProperty ),
		typeof( System.Security.Cryptography.DSAParameters ),
		typeof( System.Security.Cryptography.RSAParameters ),
		typeof( System.Security.Cryptography.CngProperty ),
		typeof( System.Security.Cryptography.X509Certificates.X509ChainStatus ),
		typeof( System.Threading.AsyncFlowControl ),
		typeof( System.Threading.CancellationToken ),
		typeof( System.Threading.CancellationTokenRegistration ),
		typeof( System.Threading.LockCookie ),
		typeof( System.Threading.NativeOverlapped ),
		typeof( System.Threading.SpinLock ),
		typeof( System.Threading.SpinWait ),
		typeof( System.Threading.Tasks.ParallelLoopResult ),
	};
var __winRTExcludes =
	new HashSet<string>()
	{
		"System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken",
		"System.Runtime.CompilerServices.AsyncVoidMethodBuilder",
		"System.Runtime.CompilerServices.AsyncTaskMethodBuilder",
		"System.Runtime.CompilerServices.AsyncVoidMethodBuilder",
		"System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1",
		"System.Runtime.CompilerServices.TaskAwaiter",
		"System.Runtime.CompilerServices.TaskAwaiter`1",
		"System.Runtime.CompilerServices.ConfiguredTaskAwaitable",
		"System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1",
		"System.Runtime.CompilerServices.YieldAwaitable",
		"System.Reflection.Emit.ExceptionHandler",
		"System.Net.Sockets.UdpReceiveResult",
	};
var __structTypes = 
	typeof( object ).Assembly.GetTypes()
	.Where( type => type.IsValueType && type.IsPublic && !Attribute.IsDefined( type, typeof( ObsoleteAttribute ) ) )
	.Concat(
		typeof( TraceListener ).Assembly.GetTypes().Where( type => type.IsValueType && type.IsPublic && !Attribute.IsDefined( type, typeof( ObsoleteAttribute ) ) )
	).Concat(
		typeof( Enumerable ).Assembly.GetTypes().Where( type => type.IsValueType && type.IsPublic && !Attribute.IsDefined( type, typeof( ObsoleteAttribute ) ) )
	).Concat(
		typeof( BigInteger ).Assembly.GetTypes().Where( type => type.IsValueType && type.IsPublic && !Attribute.IsDefined( type, typeof( ObsoleteAttribute ) ) )
	).Except( __excludes )
	.Where( t => !__winRTExcludes.Contains( t.FullName ) )
	.ToArray();
var __classTypes =
	new[]
	{
		typeof( ArraySegment<> ),
		typeof( DictionaryEntry ),
		typeof( KeyValuePair<,> ),
		typeof( Complex ),
		typeof( Uri ),
		typeof( Version ),		
		typeof( NameValueCollection ),		
	};
var __tuples =
	typeof( Tuple<> ).Assembly
	.GetTypes()
	.Where( type => type.IsGenericType && type.Namespace == typeof( Tuple<> ).Namespace && type.Name == "Tuple" )
	.ToArray();
var __notInNet35s =
	new HashSet<Type>()
	{
		typeof( System.Numerics.BigInteger ),
		typeof( System.Numerics.Complex ),
	};
var __notInSLs =
	new HashSet<Type>()
	{
		typeof( System.Collections.Specialized.BitVector32 ),
		typeof( System.Collections.Specialized.NameValueCollection ),
		typeof( System.Runtime.InteropServices.ComTypes.FILETIME ),
	};
var __notInWPs =
	new HashSet<Type>()
	{
		typeof( System.Numerics.BigInteger ),
		typeof( System.Numerics.Complex ),
	};
#>
#region -- License Terms --
//
// MessagePack for CLI
//
// Copyright (C) 2010-2012 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#endregion -- License Terms --

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Globalization;
#if !WINDOWS_PHONE && !NETFX_35
using System.Numerics;
#endif
using System.Reflection;
using System.Text;

using MsgPack.Serialization.DefaultSerializers;

namespace MsgPack.Serialization
{
	// This file generated from <#= __typeName #>.tt T4Template.
	// Do not modify this file. Edit <#= __typeName #>.tt instead.

	partial class <#= __typeName #> 
	{
		internal static Dictionary<RuntimeTypeHandle, object> InitializeDefaultTable( PackerCompatibilityOptions packerCompatibilityOptions )
		{
			var dictionary = new Dictionary<RuntimeTypeHandle, object>( <#= __structTypes.Length + __classTypes.Length + __tuples.Length + 6 #> );
			dictionary.Add( typeof( MessagePackObject ).TypeHandle, new MsgPack.Serialization.DefaultSerializers.MsgPack_MessagePackObjectMessagePackSerializer( packerCompatibilityOptions ) );
			dictionary.Add( typeof( MessagePackExtendedTypeObject ).TypeHandle, new MsgPack.Serialization.DefaultSerializers.MsgPack_MessagePackExtendedTypeObjectMessagePackSerializer( packerCompatibilityOptions ) );
			dictionary.Add( typeof( Object ).TypeHandle, new MsgPack.Serialization.DefaultSerializers.<#= typeof( Object ).FullName.Replace( Type.Delimiter, '_' ).Replace( '`', '_' ) #>MessagePackSerializer( packerCompatibilityOptions ) );
			dictionary.Add( typeof( String ).TypeHandle, new MsgPack.Serialization.DefaultSerializers.<#= typeof( String ).FullName.Replace( Type.Delimiter, '_' ).Replace( '`', '_' ) #>MessagePackSerializer( packerCompatibilityOptions ) );
			dictionary.Add( typeof( StringBuilder ).TypeHandle, new MsgPack.Serialization.DefaultSerializers.<#= typeof( StringBuilder ).FullName.Replace( Type.Delimiter, '_' ).Replace( '`', '_' ) #>MessagePackSerializer( packerCompatibilityOptions ) );
			dictionary.Add( typeof( Char[] ).TypeHandle, new MsgPack.Serialization.DefaultSerializers.<#= typeof( Char ).FullName.Replace( Type.Delimiter, '_' ).Replace( '`', '_' ) #>ArrayMessagePackSerializer( packerCompatibilityOptions ) );
			dictionary.Add( typeof( Byte[] ).TypeHandle, new MsgPack.Serialization.DefaultSerializers.<#= typeof( Byte ).FullName.Replace( Type.Delimiter, '_' ).Replace( '`', '_' ) #>ArrayMessagePackSerializer( packerCompatibilityOptions ) );
<#
foreach( Type __type in __structTypes )
{
	if( __type.IsEnum )
	{
		continue;
	}
	
	if( __notInWPs.Contains( __type ) )
	{
#>
#if !WINDOWS_PHONE
<#
	}

	if( __notInSLs.Contains( __type ) )
	{
#>
#if !SILVERLIGHT && !NETFX_CORE
<#
	}

	if( __notInSLs.Contains( __type ) )
	{
#>
#if !SILVERLIGHT
<#
	}

	if( __notInNet35s.Contains( __type ) )
	{
#>
#if !NETFX_35
<#
	}
#>
			dictionary.Add( typeof( <#= __type.FullName #> ).TypeHandle, new MsgPack.Serialization.DefaultSerializers.<#= __type.FullName.Replace( Type.Delimiter, '_' ).Replace( '`', '_' ) #>MessagePackSerializer( packerCompatibilityOptions ) );
<#

	if( __notInWPs.Contains( __type ) )
	{
#>
#endif // !WINDOWS_PHONE
<#
	}

	if( __notInSLs.Contains( __type ) )
	{
#>
#endif // !SILVERLIGHT && !NETFX_CORE
<#
	}

	if( __notInSLs.Contains( __type ) )
	{
#>
#endif // !SILVERLIGHT
<#
	}

	if( __notInNet35s.Contains( __type ) )
	{
#>
#endif // !NETFX_35
<#
	}
}

foreach( Type __type in __classTypes )
{
	if( __notInWPs.Contains( __type ) )
	{
#>
#if !WINDOWS_PHONE
<#
	}

	if( __notInSLs.Contains( __type ) )
	{
#>
#if !SILVERLIGHT && !NETFX_CORE
<#
	}

	if( __notInSLs.Contains( __type ) )
	{
#>
#if !SILVERLIGHT
<#
	}

	if( __notInNet35s.Contains( __type ) )
	{
#>
#if !NETFX_35
<#
	}
	
	if( __type.IsGenericTypeDefinition )
	{
#>
			dictionary.Add( typeof( <#= ToCSharpTypeToken( __type ) #> ).TypeHandle, typeof( <#= __type.FullName.Replace( '`', '_' ).Replace( Type.Delimiter, '_' ) #>MessagePackSerializer<#= GetCSharpTypeArguments( __type ) #> ) );
<#
	}
	else
	{
#>
			dictionary.Add( typeof( <#= ToCSharpTypeToken( __type ) #> ).TypeHandle, new MsgPack.Serialization.DefaultSerializers.<#= __type.FullName.Replace( Type.Delimiter, '_' ).Replace( '`', '_' ) #>MessagePackSerializer( packerCompatibilityOptions ) );
<#
	}

	if( __notInWPs.Contains( __type ) )
	{
#>
#endif // !WINDOWS_PHONE
<#
	}

	if( __notInSLs.Contains( __type ) )
	{
#>
#endif // !SILVERLIGHT && !NETFX_CORE
<#
	}

	if( __notInSLs.Contains( __type ) )
	{
#>
#endif // !SILVERLIGHT
<#
	}

	if( __notInNet35s.Contains( __type ) )
	{
#>
#endif // !NETFX_35
<#
	}
}
	
foreach( Type __tuple in __tuples )
{
#>
			dictionary.Add( typeof( <#= ToCSharpTypeToken( __tuple ) #> ).TypeHandle, new MsgPack.Serialization.DefaultSerializers.<#= __tuple.FullName.Replace( Type.Delimiter, '_' ).Replace( '`', '_' ) #>MessagePackSerializer( packerCompatibilityOptions ) );
<#
}
#>
			return dictionary;
		}
	}
}
<#+
private static string ToCSharpTypeToken( Type type )
{
	if( !type.IsGenericType )
	{
		return type.FullName;
	}
	
	return type.Namespace + Type.Delimiter + type.Name.Remove( type.Name.IndexOf( '`' ) ) + "<" + String.Join( string.Empty, Enumerable.Repeat( ',', type.GetGenericArguments().Length - 1 ) ) + ">";
}

private static string GetCSharpTypeArguments( Type type )
{
	var buffer = new StringBuilder();
	BuildCSharpGenericArgumentsToken( type, buffer, false );
	return buffer.ToString();
}

private static void BuildCSharpGenericArgumentsToken( Type type, StringBuilder buffer, bool containsGenericArguments )
{
	if( !type.IsGenericType)
	{
		return;
	}
	
	buffer.Append('<');
	
	bool isFirst = true;
	foreach( Type genericParameter in type.GetGenericArguments () )
	{	
		if( isFirst )
		{
			isFirst = false;
		}
		else
		{
			buffer.Append( ',' ).Append( ' ' );
		}
		
		if( containsGenericArguments )
		{
			if( genericParameter.IsGenericParameter )
			{
				buffer.Append( genericParameter.Name );
			}
			else
			{
				buffer.Append( genericParameter.FullName );
			}
		}
	}
	
	buffer.Append( '>' );
}

private static string ToCSharpToken( Type type )
{
	if( !type.IsGenericType )
	{
		return type.FullName;
	}
	
	StringBuilder buffer = new StringBuilder( type.FullName.Remove( type.FullName.IndexOf( '`' ) ) );
	BuildCSharpGenericArgumentsToken( type, buffer, false );
	
	return buffer.ToString();
}
#>