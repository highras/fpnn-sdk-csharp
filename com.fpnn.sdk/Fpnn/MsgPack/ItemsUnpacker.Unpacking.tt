<#@ template debug="true" hostSpecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ include file="Unpacking.ttinclude" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
#region -- License Terms --
//
// MessagePack for CLI
//
// Copyright (C) 2010-2013 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#endregion -- License Terms --

using System;
using System.Diagnostics.Contracts;
using System.Globalization;
using System.Text;

namespace MsgPack
{
	// This file was generated from ItemsUnpacker.Unpacking.tt and StreamingUnapkcerBase.ttinclude T4Template.
	// Do not modify this file. Edit ItemsUnpacker.Unpacking.tt and StreamingUnapkcerBase.ttinclude instead.

	partial class ItemsUnpacker
	{
<#
this.PushIndent( 2 );

foreach( var type in
	new []
	{ 
		typeof( bool ), 
		typeof( byte ), typeof( sbyte ),
		typeof( short ), typeof( ushort ),
		typeof( int ), typeof( uint ),
		typeof( long ), typeof( ulong ),
		typeof( float ), typeof( double ),
	}
)
{
	this.WriteReadBody( type.Name, type.Name, false, () => this.WriteUnpack( type ) );
	this.WriteReadBody( type.Name, type.Name, true, () => this.WriteUnpack( type ) );

	this.WriteReadBody( "Nullable" + type.Name, type.Name + "?", false, () => this.WriteUnpack( typeof( Nullable<> ).MakeGenericType( type ) ) );
	this.WriteReadBody( "Nullable" + type.Name, type.Name + "?", true, () => this.WriteUnpack( typeof( Nullable<> ).MakeGenericType( type ) ) );
}

this.WriteReadBody( "Binary", "Byte[]", false, 
	() => 
	{ 
		this.WriteUnpackByteArray( ( size, offset )=> "new byte[ size ]" );
		this.OnReturnScalar( "resultValue" );
		this.WriteReturnBody();
	}
);
this.WriteReadBody( "Binary", "Byte[]", true, 
	() => 
	{ 
		this.WriteUnpackByteArray( ( size, offset )=> "new byte[ size ]" );
		this.OnReturnScalar( "resultValue" );
		this.WriteReturnBody();
	}
);

this.WriteReadBody( "String", "String", false, 
	() => 
	{ 
		this.WriteEncodingDeclaration();
		this.WriteUnpackString();
		this.OnReturnScalar( "resultValue" );
		this.WriteReturnBody();
	}
);
this.WriteReadBody( "String", "String", true, 
	() => 
	{ 
		this.WriteEncodingDeclaration();
		this.WriteUnpackString();
		this.OnReturnScalar( "resultValue" );
		this.WriteReturnBody();
	}
);

this.WriteReadBody( "Object", "MessagePackObject", false, this.WriteUnpackObject );
this.WriteReadBody( "Object", "MessagePackObject", true, this.WriteUnpackObject );

this.WriteReadBody( "ArrayLength", "Int64", false, this.WriteUnpackArrayLength );
this.WriteReadBody( "ArrayLength", "Int64", true, this.WriteUnpackArrayLength );

this.WriteReadBody( "MapLength", "Int64", false, this.WriteUnpackMapLength );
this.WriteReadBody( "MapLength", "Int64", true, this.WriteUnpackMapLength );

this.WriteReadBody( "MessagePackExtendedTypeObject", "MessagePackExtendedTypeObject", false, this.WriteUnpackExtendedTypeObject );
this.WriteReadBody( "MessagePackExtendedTypeObject", "MessagePackExtendedTypeObject", true, this.WriteUnpackExtendedTypeObject );

this.PopIndent();
#>
	}
}
<#+
private void WriteReadBody( string typeName, string fullTypeName, bool isForSubtree, Action bodyWriter )
{
#>
<#= isForSubtree ? "internal" : "public override" #> bool Read<#= isForSubtree ? "Subtree" : String.Empty #><#= typeName #>( out <#= fullTypeName #> result )
{
<#+
	if( !isForSubtree )
	{
#>
	this.EnsureNotInSubtreeMode();
<#+
	}
#>
	var source = this._stream;
	var buffer = this._scalarBuffer;
<#+
	this.PushIndent( 1 );
	bodyWriter();
	this.PopIndent();
#>
}

<#+
}

private void WriteEncodingDeclaration()
{
#>
var encoding = Encoding.UTF8;
<#+
}

private void WriteReturnBody()
{
#>
result = resultValue;
return true;
<#+
}

private void OnFailedToReadHeader( string typeName )
{
#>
result = default( <#= typeName #> );
return false;
<#+
}

private void OnReturnScalar( string resultVariable )
{
#>
this.InternalCollectionType = CollectionType.None;
<#+
}

private void OnReturnScalarObject( string resultVariable )
{
#>
this.InternalCollectionType = CollectionType.None;
<#+
}

private void OnIsArray( string sizeVariable )
{
#>
this.InternalCollectionType = CollectionType.Array;
this.InternalItemsCount = <#= sizeVariable #>;
this.InternalData = <#= sizeVariable #>;
<#+
}

private void OnIsMap( string sizeVariable )
{
#>
this.InternalCollectionType = CollectionType.Map;
this.InternalItemsCount = <#= sizeVariable #>;
this.InternalData = <#= sizeVariable #>;
<#+
}

private void OnNilRawValue()
{
#>
result = null;
<#+
this.OnReturnScalarObject( "result" );
#>
return true;
<#+
}

private void WriteReturn( string valueVariable )
{
	if( valueVariable != "result" )
	{
#>
result = <#= valueVariable #>;
<#+
	}
#>
return true;
<#+
}
#>